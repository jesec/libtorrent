include(CheckCXXSourceCompiles)
include(CheckCXXSourceRuns)
include(CheckFunctionExists)
include(CheckIncludeFileCXX)
include(CheckTypeSize)

set(BUILDINFO_H ${CMAKE_BINARY_DIR}/include/torrent/buildinfo.h)
string(TIMESTAMP CURRENT_TIMESTAMP)
file(WRITE ${BUILDINFO_H}
     "/* This file is auto-generated by CMake on ${CURRENT_TIMESTAMP}. */\n\n")
file(APPEND ${BUILDINFO_H} "#ifndef LIBTORRENT_BUILDINFO_H\n")
file(APPEND ${BUILDINFO_H} "#define LIBTORRENT_BUILDINFO_H\n\n")

file(APPEND ${BUILDINFO_H} "/* Version number of package */\n")
file(APPEND ${BUILDINFO_H} "#define LT_VERSION \"${PROJECT_VERSION}\"\n\n")

file(APPEND ${BUILDINFO_H}
     "/* Identifier that is part of the default peer id */\n")
file(APPEND ${BUILDINFO_H} "#define LT_PEER_NAME \"-lt0D80-\"\n\n")

file(APPEND ${BUILDINFO_H}
     "/* 4 byte client and version identifier for DHT */\n")
file(APPEND ${BUILDINFO_H} "#define LT_PEER_VERSION \"lt\\x0D\\x80\"\n\n")

if(LT_INSTRUMENTATION)
  file(APPEND ${BUILDINFO_H} "/* Enable instrumentation */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_INSTRUMENTATION 1\n\n")
endif()

if(USE_ALIGNED)
  file(APPEND ${BUILDINFO_H} "/* Require byte alignment */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_USE_ALIGNED 1\n\n")
endif()

if(USE_EXTRA_DEBUG)
  file(APPEND ${BUILDINFO_H} "/* Enable extra debugging checks */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_USE_EXTRA_DEBUG 1\n\n")
endif()

check_function_exists(backtrace EXECINFO_LIBC_HAS_BACKTRACE)
if(EXECINFO_LIBC_HAS_BACKTRACE)
  file(APPEND ${BUILDINFO_H}
       "/* Defined if backtrace() could be fully identified */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_HAVE_BACKTRACE 1\n\n")
endif()

check_cxx_source_runs(
  "
  #include <fcntl.h>
  #include <linux/falloc.h>
  int main() {
    int fd = open(\"/dev/null\", 0);
    fallocate(fd, FALLOC_FL_KEEP_SIZE, 0, 1024);
  }
  "
  HAVE_FALLOCATE)

if(HAVE_FALLOCATE)
  file(APPEND ${BUILDINFO_H} "/* Linux's fallocate supported */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_HAVE_FALLOCATE 1\n\n")
else()
  check_cxx_source_compiles(
    "
    #include <fcntl.h>
    int main() {
      posix_fallocate(0, 0, 0);
    }
    "
    USE_POSIX_FALLOCATE)
  if(USE_POSIX_FALLOCATE)
    file(APPEND ${BUILDINFO_H} "/* posix_fallocate supported */\n")
    file(APPEND ${BUILDINFO_H} "#define LT_USE_POSIX_FALLOCATE 1\n\n")
  endif()
endif()

check_cxx_source_runs(
  "
  #include <sys/inotify.h>
  int main() { return inotify_init() == -1; }
  "
  HAVE_INOTIFY)

if(HAVE_INOTIFY)
  file(APPEND ${BUILDINFO_H} "/* sys/inotify.h exists and works correctly */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_HAVE_INOTIFY 1\n\n")
endif()

file(APPEND ${BUILDINFO_H} "/* Default address space size */\n")
check_type_size("long" LONG_SIZE)
if(LONG_SIZE GREATER_EQUAL 8)
  file(APPEND ${BUILDINFO_H} "#define LT_DEFAULT_ADDRESS_SPACE_SIZE 4096\n\n")
else()
  file(APPEND ${BUILDINFO_H} "#define LT_DEFAULT_ADDRESS_SPACE_SIZE 1024\n\n")
endif()

check_cxx_source_runs(
  "
  #include <sys/epoll.h>
  int main() {
    int fd = epoll_create(100);
    return 0;
  }
  "
  USE_EPOLL)

if(USE_EPOLL)
  file(APPEND ${BUILDINFO_H} "/* Use epoll */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_USE_EPOLL 1\n\n")
else()
  check_cxx_source_runs(
    "
    #include <sys/time.h>  /* Because OpenBSD's sys/event.h fails to compile otherwise. Yeah... */
    #include <sys/event.h>
    int main() {
      int fd = kqueue();
      return 0;
    }
    "
    USE_KQUEUE)
  if(USE_KQUEUE)
    file(APPEND ${BUILDINFO_H} "/* Use kqueue */\n")
    file(APPEND ${BUILDINFO_H} "#define LT_USE_KQUEUE 1\n\n")
    check_cxx_source_runs(
      "
      #include <fcntl.h>
      #include <stdlib.h>
      #include <unistd.h>
      #include <sys/event.h>
      #include <sys/time.h>
      int main() {
        struct kevent ev[2], ev_out[2];
        struct timespec ts = { 0, 0 };
        int pfd[2], pty[2], kfd, n;
        char buffer[9001];
        if (pipe(pfd) == -1) return 1;
        if (fcntl(pfd[1], F_SETFL, O_NONBLOCK) == -1) return 2;
        while ((n = write(pfd[1], buffer, sizeof(buffer))) == sizeof(buffer));
        if ((pty[0]=posix_openpt(O_RDWR | O_NOCTTY)) == -1) return 3;
        if ((pty[1]=grantpt(pty[0])) == -1) return 4;
        EV_SET(ev+0, pfd[1], EVFILT_WRITE, EV_ADD | EV_ENABLE, 0, 0, NULL);
        EV_SET(ev+1, pty[1], EVFILT_READ, EV_ADD | EV_ENABLE, 0, 0, NULL);
        if ((kfd = kqueue()) == -1) return 5;
        if ((n = kevent(kfd, ev, 2, NULL, 0, NULL)) == -1) return 6;
        if (ev_out[0].flags & EV_ERROR) return 7;
        if (ev_out[1].flags & EV_ERROR) return 8;
        read(pfd[0], buffer, sizeof(buffer));
        if ((n = kevent(kfd, NULL, 0, ev_out, 2, &ts)) < 1) return 9;
        return 0;
      }
      "
      KQUEUE_SUPPORT_PIPE)
    if(NOT KQUEUE_SUPPORT_PIPE)
      file(APPEND ${BUILDINFO_H} "/* kqueue only supports sockets */\n")
      file(APPEND ${BUILDINFO_H} "#define LT_KQUEUE_SOCKET_ONLY 1\n\n")
    endif()
  endif()
endif()

check_cxx_source_compiles(
  "
  #include <cstddef>
  template <int i>
  struct foo {};
  int main()
  {
    int a = __builtin_popcount(4);
    int b = __builtin_popcountl(4);
    int c = __builtin_popcountll(4);
    // require constant expression
    foo<__builtin_popcount(4)> f;
  }
  "
  USE_BUILTIN_POPCOUNT)

if(USE_BUILTIN_POPCOUNT)
  file(APPEND ${BUILDINFO_H} "/* Use __builtin_popcount */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_USE_BUILTIN_POPCOUNT 1\n\n")
endif()

check_cxx_source_compiles(
  "
  #include <sys/mman.h>
  #include <sys/types.h>
  int main() {
    static char test[] = \"test\";
    madvise((void *)test, sizeof(test), MADV_NORMAL);
  }
  "
  USE_MADVISE)

if(USE_MADVISE)
  file(APPEND ${BUILDINFO_H} "/* Use madvise */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_USE_MADVISE 1\n\n")
endif()

check_cxx_source_compiles(
  "
  #include <sys/types.h>
  #include <sys/mman.h>
  #include <unistd.h>
  int main() {
    mincore((char*)0, 0, (unsigned char*)0);
  }
  "
  USE_MINCORE_UNSIGNED)

if(USE_MINCORE_UNSIGNED)
  file(APPEND ${BUILDINFO_H} "/* Use mincore */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_USE_MINCORE 1\n\n")
  file(APPEND ${BUILDINFO_H} "/* use unsigned char* in mincore */\n")
  file(APPEND ${BUILDINFO_H} "#define LT_USE_MINCORE_UNSIGNED 1\n\n")
else()
  check_cxx_source_compiles(
    "
  #include <sys/types.h>
  #include <sys/mman.h>
  #include <unistd.h>
  int main() {
    mincore((char*)0, 0, (char*)0);
  }
  "
    USE_MINCORE_SIGNED)
  if(USE_MINCORE_SIGNED)
    file(APPEND ${BUILDINFO_H} "/* Use mincore */\n")
    file(APPEND ${BUILDINFO_H} "#define LT_USE_MINCORE 1\n\n")
    file(APPEND ${BUILDINFO_H} "/* use unsigned char* in mincore */\n")
    file(APPEND ${BUILDINFO_H} "#define LT_USE_MINCORE_UNSIGNED 0\n\n")
  endif()
endif()

file(APPEND ${BUILDINFO_H} "#endif\n")
